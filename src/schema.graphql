# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

type User {
  id: ID
  name: String!
  email: String
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID
  text: String
  author: User!
  post: Post!
  createdAt: String!
  updatedAt: String!
}

type Query {
  users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
  posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
  myPosts(query: String, first: Int, skip: Int, after: String orderBy: PostOrderByInput): [Post!]!
  comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
  me: User!
  post(id: ID!): Post!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput): AuthPayload!
  createPost(data: CreatePostInput): Post!
  updatePost(id: ID!, data: CreatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(data: createCommentInput): Comment!
  updateComment(id: ID!, data: updateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
  updateUser(data: updateUserInput): User!
  deleteUser: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input createCommentInput {
  text: String!
  post: ID!
}

input updateCommentInput {
  text: String!
}

input updateUserInput {
  name: String
  email: String
  password: String
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  published: Boolean!
  body: String!
}
