type Post {
  id: ID!
  title: String!
  body: String!
  author: User!
  comments: [Comment!]!
}

type User {
  id: ID
  name: String!
  email: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Comment {
  id: ID
  text: String
  author: User!
  post: Post!
}

type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput): AuthPayload!
  createPost(data: CreatePostInput): Post!
  updatePost(id: ID!, data: CreatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(data: createCommentInput): Comment!
  updateComment(id: ID!, data: updateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
  updateUser(id: ID!, data: updateUserInput): User!
  deleteUser(id: ID!): User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input createCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input updateCommentInput {
  text: String!
}

input updateUserInput {
  name: String
  email: String
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  body: String!
}